);					// calculates 2's compliment of normalized b
	print_simulation_step("2's Com. (Normalize B)", comp_b, 2, true);
	print_simulation_step("SRT Steps", 25);

	arg_normalize(aq, adjustment_factor, 1);	//adjust AQ, and insert * in LSBs
	print_simulation_step("Adjust AQ", aq);
	arg_skip_over(aq, shift_count, '0');			//shift over 0's and insert 0's in LSBs. left shift_count starts from here !
	//simulation step is inside the function
												// check if shift_count is equal n + 1, n = number of bit in b
	while (shift_count > 0){
												// substract B
		if (pos_result){ 
			arg_add(aq, comp_b);
			print_simulation_step("Subtract B", comp_b, 1);
		}	
												// check if result is positive or negetive
		if (aq[0] == '0'){
			print_simulation_step("Positive result", aq);
			arg_shl_new_q(aq, '1');				// result positive, shift AQ left, q_0 = 1
			shift_count--;
			print_simulation_step("Shift AQ left, q_0 <- 1", aq);
												// check if we already did n + 1 left shifts
			if(shift_count == 0){
				