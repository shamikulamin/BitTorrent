 arg2[i] == '1'){ arg1[i] = '1'; carry = '1'; }
		else{ /* do nothing, could also check for * marker here but not neccessarily.*/ }
	}
	// discard the final C_out
	// cost calculation for one addition (carry select)
	int m = 2;								// 2 bit full adder
	int N = arg2.length() - 1;				// total number of bits to add
	if(N % m) { N += (N % m);}				// round divisor length while not integer multiple of m-bit adder
	int m_t = 6;							// total time for m bit full adder
	int temp = (((N / m) - 1) * 2) + m_t;	// generalized equation for cost calculation in addition
	total_cost += temp;
}
/////////////////////////////////////////////////////////////

//////////////////////// shift-left-replace-q0 //////////////
// arg: aq
//ch: assign 0 or 1 to Q_0
void arg_shl_new_q(string & arg, char ch){
	for (int i = 1; i < arg.length() -1; i++){
		arg[i] = arg[i+1];
	}
	arg[arg.length()-1] = ch;
	total_cost += 3;	// one left shift operation costs 3 dt
}
//////////////////////////////////////////////////////////////

////////////